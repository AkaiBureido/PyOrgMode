#+BABEL: :comments no
#+VERSION: 0.01h
* PyOrgMode
** Tools
   [[elisp:org-babel-tangle][Tangle]] (Export the PyOrgMode.py file)
** Documentation
*** TODO TODO LIST [0/9]
- [ ] TODO Document every function correctly (docstrings)
- [ ] TODO Error/Warning managment
- [ ] TODO Check for other OS compatibility
- [ ] TODO Do a validator (input file MUST be output file, and check every function)
- [ ] TODO TODO tags (and others)
- [ ] TODO Add more types of data (List…) 
- [ ] TODO Class DataStructure : Move or delete nodes
- [ ] TODO Classes : add functions to get properties
- [ ] TODO Class Table : Table edition (must add separators, cell length, length calculator…)
- [ ] TODO Class Node: Add the intra-header scheduling
*** BUG LIST [0%]
- [ ] The drawers lost indentation and added spaces/tabs in properties  :NONBLOCKING::NODATALOSS: 
*** ChangeLog
    :PROPERTIES:
    :ID:       b2c042e4-e1f4-49ed-8f0e-2b5f8671e080
    :END:
#+begin_src ascii :tangle ChangeLog :exports code
0.01i
- Internal changes
   Renamed Plugin class to OrgPlugin
   Added close function to plugins
   Adding Table cells subdivision (easier editing)
- PyOrgMode.org Structure change
   Added test.py in the document
0.01h
- Internal changes
   Added Plugin system (simplifying the main loop of DataStructure)
   The DataStructure class is now an OrgElement
- External changes
   Node,Table,Drawer and Schedule are now plugins.
    Their object method is now joined by PluginName.Element
- New elements
   Added Table element (as a Plugin)
0.01g
- Changed elements
   Node : Added priority management
0.01f
- New elements
   Added Schedule element for 'DEADLINE: and 'SCHEDULED:
- Optimizations
   Class DataStructure : Trying to simplify the Reg exps
#+end_src
*** Authors [1/1]
- [X] BISSON Jonathan <bissonjonathan on the googlethingy>
** Code
*** License
    :PROPERTIES:
    :ID:       31a46da7-f49b-4826-9c46-1513054f6202
    :END:
#+srcname: license_comments
#+begin_src python :tangle PyOrgMode.py :exports code
  # -*- encoding: utf-8 -*-
  ##############################################################################
  #
  #    PyOrgMode, a python module for treating with orgfiles
  #    Copyright (C) 2010 Jonathan BISSON (bissonjonathan on the google thing).
  #    All Rights Reserved
  #
  #    This program is free software: you can redistribute it and/or modify
  #    it under the terms of the GNU General Public License as published by
  #    the Free Software Foundation, either version 3 of the License, or
  #    (at your option) any later version.
  #
  #    This program is distributed in the hope that it will be useful,
  #    but WITHOUT ANY WARRANTY; without even the implied warranty of
  #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  #    GNU General Public License for more details.
  #
  #    You should have received a copy of the GNU General Public License
  #    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  #
  ##############################################################################
#+end_src
*** Imports
    :PROPERTIES:
    :ID:       5fa2a7a6-476a-43c2-81f4-0fee4ee86fe2
    :END:
#+srcname: imports
#+begin_src python :tangle PyOrgMode.py :exports code
  """
  The PyOrgMode class is able to read,modify and create orgfiles. The internal
  representation of the file allows the use of orgfiles easily in your projects.
  """
  
  import re
  import string
#+end_src
*** Class OrgPlugin
    :PROPERTIES:
    :ID:       e78f2703-0843-43d5-8915-e59b411e0617
    :END:
#+srcname: class_OrgPlugin
#+begin_src python :tangle PyOrgMode.py :exports code
  class OrgPlugin:
      """
      Generic class for all plugins
      """
      def __init__(self):
          self.treated = True
      def treat(self,current,line):
          self.treated = True
          return self._treat(current,line)
      def _treat(self,current,line):
          self.treated = False
          return current
      def close(self,current):
          self.treated = True
          return self._close(current)
      def _close(self,current):
          self.treated = False
          return current
#+end_src
*** Class OrgElement
    :PROPERTIES:
    :ID:       caea64f7-03b1-4f45-8abe-81819d89c6a9
    :END:
#+srcname: class_OrgElement
#+begin_src python :tangle PyOrgMode.py :exports code
  class OrgElement:
      """
      Generic class for all Elements excepted text and unrecognized ones
      """
      def __init__(self):
          self.content=[]
          self.parent=None
          self.level=0
      def append(self,element):
          # TODO Check validity
          self.content.append(element)
          # Check if the element got a parent attribute
          # If so, we can have childrens into this element
          if hasattr(element,"parent"):
              element.parent = self
          return element
  
#+end_src
*** Class Schedule
    :PROPERTIES:
    :ID:       c630bcdb-1a8c-42e0-be7d-00b291478083
    :END:
#+srcname: class_Schedule
#+begin_src python :tangle PyOrgMode.py :exports code
  class Schedule(OrgPlugin):
      """Plugin for Schedule elements"""
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("(?:\s*)(SCHEDULED|DEADLINE)(?::\s*)(<.*?>)(?:\s.*|$)")
      def _treat(self,current,line):
          scheduled = self.regexp.findall(line)
          if scheduled:
              current.append(self.Element(scheduled[0][0], scheduled[0][1]))
          else:
              self.treated = False
          return current
      class Element(OrgElement):
          """Schedule is an element taking into account DEADLINE and SCHEDULED elements"""
          DEADLINE = 1
          SCHEDULED = 2
          def __init__(self,type="",date=""):
              OrgElement.__init__(self)
              self.date = date
              self.type = 0
              if type == "DEADLINE":
                  self.type = self.DEADLINE
              elif type == "SCHEDULED":
                  self.type = self.SCHEDULED
  
          def __str__(self):
              """Outputs the Schedule element in text format (e.g SCHEDULED: <2010-10-10 10:10>)"""
              if self.type == self.DEADLINE:
                  output = "DEADLINE:"
              elif self.type == self.SCHEDULED:
                  output = "SCHEDULED:"
              return output + " " + self.date + "\n"
#+end_src
*** Class Drawer
    :PROPERTIES:
    :ID:       72f6c28a-d103-4462-888e-297d49d0122e
    :END:
#+srcname: class_Drawer
#+begin_src python :tangle PyOrgMode.py :exports code
  class Drawer(OrgPlugin):
      """A Plugin for drawers"""
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("^(?:\s*?)(?::)(\S.*?)(?::)\s*(.*?)$")
      def _treat(self,current,line):
          drawer = self.regexp.search(line)
          if isinstance(current, Drawer.Element): # We are in a drawer
              if drawer:
                  if drawer.group(1) == "END": # Ending drawer
                      current = current.parent
                  elif drawer.group(2): # Adding a property
                      current.append(self.Property(drawer.group(1),drawer.group(2)))
              else: # Adding text in drawer
                  current.append(line.rstrip("\n"))
          elif drawer: # Creating a drawer
              current = current.append(Drawer.Element(drawer.group(1)))
          else:
              self.treated = False
              return current
          return current # It is a drawer, change the current also (even if not modified)
      
      class Element(OrgElement):
          """A Drawer object, containing properties and text"""
          def __init__(self,name=""):
              OrgElement.__init__(self)
              self.name = name
          def __str__(self):
              output = ":" + self.name + ":\n"
              for element in self.content:
                  output = output + str(element) + "\n"
              output = output + ":END:\n"
              return output
      class Property(OrgElement):
          """A Property object, used in drawers."""
          def __init__(self,name="",value=""):
              OrgElement.__init__(self)
              self.name = name
              self.value = value
          def __str__(self):
              """Outputs the property in text format (e.g. :name: value)"""
              return ":" + self.name + ": " + self.value
  
#+end_src
*** Class Table
    :PROPERTIES:
    :ID:       81c6b9ed-297a-49ab-8209-74873dfc524a
    :END:
#+srcname: class_Table
#+begin_src python :tangle PyOrgMode.py :exports code
  class Table(OrgPlugin):
      """A plugin for table managment"""
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("^\s*\|")
      def _treat(self,current,line):
          table = self.regexp.match(line)
          if table:
              if not isinstance(current,self.Element):
                  current = current.append(self.Element())
              current.append(line.rstrip().strip("|").split("|"))
          else:
              if isinstance(current,self.Element):
                  current = current.parent
              self.treated = False
          return current
  
      class Element(OrgElement):
          """
          A Table object
          """
          
          def __init__(self):
              OrgElement.__init__(self)
          def __str__(self):
              output = ""
              for element in self.content:
                  output = output + "|"
                  for cell in element:
                      output = output + str(cell) + "|"
                  output = output + "\n"
              return output
          
  
#+end_src
*** Class Node
    :PROPERTIES:
    :ID:       3b4ae05e-be52-4854-a638-ecc8d2480512
    :END:
#+srcname: class_Node
#+begin_src python :tangle PyOrgMode.py :exports code
  class Node(OrgPlugin):
      def __init__(self):
          OrgPlugin.__init__(self)
          self.regexp = re.compile("^(\*+)\s*(\[.*\])?\s*(.*)$")
      def _treat(self,current,line):
          heading = self.regexp.findall(line)
          if heading: # We have a heading
              if current.parent :
                  current.parent.append(current)
    
                    # Is that a new level ?
              if (len(heading[0][0]) > current.level): # Yes
                  parent = current # Parent is now the current node
              else:
                  parent = current.parent # If not, the parent of the current node is the parent
                    # If we are going back one or more levels, walk through parents
              while len(heading[0][0]) < current.level:
                  current = current.parent
    
                    # Creating a new node and assigning parameters
              current = Node.Element() 
              current.level = len(heading[0][0])
              current.heading = re.sub(":([\w]+):","",heading[0][2]) # Remove tags
              current.priority = heading[0][1]
              current.parent = parent
                    
                    # Looking for tags
              heading_without_links = re.sub(" \[(.+)\]","",heading[0][2])
              current.tags = re.findall(":([\w]+):",heading_without_links)
          else:
              self.treated = False
          return current
      def _close(self,current):
          # Add the last node
          if current.level>0:
              current.parent.append(current)
  
      class Element(OrgElement):
          # Defines an OrgMode Node in a structure
          # The ID is auto-generated using uuid.
          # The level 0 is the document itself
    
          def __init__(self):
              OrgElement.__init__(self)
              self.content = []       
              self.level = 0
              self.heading = ""
              self.priority = ""
              self.tags = []
            # TODO  Scheduling structure
    
          def __str__(self):
              output = ""
              
              if hasattr(self,"level"):
                  output = output + "*"*self.level
    
              if self.parent is not None:
                  output = output + " "
                  if self.priority :
                      output = output + self.priority + " "
                  output = output + self.heading
    
                  for tag in self.tags:
                      output= output + ":" + tag + ":"
    
                  output = output + "\n"
      
              for element in self.content:
                  output = output + element.__str__()
    
              return output
    
#+end_src
*** Class DataStructure
    :PROPERTIES:
    :ID:       123f19bd-309b-4bda-91de-9c1ca202fac4
    :END:
#+srcname: class_Property
#+begin_src python :tangle PyOrgMode.py :exports code
    class DataStructure(OrgElement):
        """
        Data structure containing all the nodes
        The root property contains a reference to the level 0 node
        """
        root = None
        def __init__(self):
            OrgElement.__init__(self)
        def load_from_file(self,name):
            current = Node.Element()
            current.parent = None
            self.root = current
     
            file = open(name,'r')
    
            plugins = []
            plugins.append(Table())
            plugins.append(Drawer())
            plugins.append(Node())
            plugins.append(Schedule())
    
            for line in file:
                
                for plugin in plugins:
                    current = plugin.treat(current,line)
                    if plugin.treated: # Plugin found something
                        treated = True
                        break;
                    else:
                        treated = False
                if not treated: # Nothing special, just content
                    if line is not None:
                        current.append(line)
    
            for plugin in plugins:
                current = plugin.close(current)
            file.close()
    
        def save_to_file(self,name,node=None):
            output = open(name,'w')
            if node == None:
                node = self.root
            output.write(str(node))
            output.close()
#+end_src
    
** Tests
*** Take test.org, outputs output.org
    :PROPERTIES:
    :ID:       f02cbd6b-e66e-4afa-9f00-ce6c0ea174d5
    :END:
#+srcname: test_test.org
#+begin_src python :tangle test.py :exports code
import PyOrgMode
test = PyOrgMode.DataStructure()
test.load_from_file("test.org")
test.save_to_file("output.org")
#+end_src
